[{"id":0,"href":"/git-course/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"\rCaput vino delphine in tamen vias\r#\rCognita laeva illo fracta\r#\rLorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere\r#\rPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit\r#\rAurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua\r#\rIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta\r#\rMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":1,"href":"/git-course/docs/example/","title":"Example Site","section":"Docs","content":"\rIntroduction\r#\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad\r#\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque\r#\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":2,"href":"/git-course/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"\rAt me ipso nepotibus nunc celebratior genus\r#\rTanto oblite\r#\rLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius\r#\rQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae\r#\rCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":3,"href":"/git-course/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"\rIntroduction\r#\rThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions\r#\rThere are a few concepts that you need to understand before creating a theme.\nSkins\r#\rSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page\r#\rThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File\r#\rWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent\r#\rContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter\r#\rThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown\r#\rContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files\r#\rHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template\r#\rA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template\r#\rA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template\r#\rA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site\r#\rLet\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site\r#\rRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site\r#\rVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme\r#\rHugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton\r#\rUse the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme\r#\rNow that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site\r#\rNow that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page\r#\rHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static\r#\rHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle\r#\rWhen you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory\r#\rWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option\r#\rHugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload\r#\rHugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands\r#\rUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template\r#\rThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page\r#\rRight now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload\r#\rNote: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page\r#\r\u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts\r#\rNow that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates\r#\rIn Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage\r#\rThe home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts\r#\rWe\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File\r#\r$ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content\r#\rThe posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing\r#\rWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages\r#\rLet\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates\r#\rIf you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials\r#\rIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials\r#\rThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials\r#\r$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts\r#\rIt\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template\r#\rWe\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself\r#\rDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":4,"href":"/git-course/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":"\rMove static content to static\r#\rJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file\r#\rHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site\r#\rThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates\r#\rThat\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes\r#\rJekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation\r#\rAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage\r#\rI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches\r#\rFix content\r#\rDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up\r#\rYou\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff\r#\rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":5,"href":"/git-course/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":"\rUbi loqui\r#\rMentem genus facietque salire tempus bracchia\r#\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non\r#\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":6,"href":"/git-course/docs/module2/git-locations/","title":"Git Locations","section":"Modulo 2","content":"\r1. Working Directory (Directorio de trabajo)\r#\rEs el lugar donde editas tus archivos directamente. Aquí ves los archivos tal como están en tu sistema de archivos. Los cambios que haces aún no están registrados por Git 2. Staging Area (Área de preparación o índice)\r#\rEs una zona intermedia donde seleccionas qué cambios quieres incluir en el próximo commit. Usas #git add# para mover archivos desde el Working Directory al #Staging Area# . Te permite tener control granular sobre qué se guarda en el historial. 3. Local Repository (Repositorio local)\r#\rEs donde Git guarda los #commits# que haces. Se encuentra dentro de la carpeta oculta #.git#. Aquí vive el historial completo de tu proyecto. Usas #git commit# para mover los cambios del Staging Area al repositorio local. 4. Remote Repository (Repositorio remoto)\r#\rEs una copia del repositorio alojada en un servidor como GitHub, GitLab o Bitbucket. Permite colaboración entre desarrolladores. Usas #git push# para enviar tus #commits# al remoto, y #git pull# para traer cambios. Flujo típico de trabajo Working Directory → git add → Staging Area → git commit → Local Repository → git push → Remote Repository\n¿Por qué es importante entender esto?\r#\rTe ayuda a evitar errores como hacer commits incompletos, ademas facilita la colaboración y resolución de conflictos y te permite usar Git como una máquina del tiempo para tu código.\rResumen\r#\rflowchart LR\rA[Working Directory] --\u003e|git add| B[Staging Area]\rB --\u003e|git commit| C[Local Repository]\rC --\u003e|git push| D[Remote Repository]\rD --\u003e|git pull| C\rclassDef etapa fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;\rclass A,B,C,D etapa;\r"},{"id":7,"href":"/git-course/docs/module2/git-graph-model/","title":"Git Graph Model","section":"Modulo 2","content":"\rEl modelo de grafo en Git\r#\rEntender cómo Git representa el historial de cambios como un grafo dirigido acíclico (DAG), y cómo cada commit se conecta con sus antecesores.\nDAG visual\r#\rgraph LR\rA[Commit A] --\u003e B[Commit B]\rB --\u003e C[Commit C]\rC --\u003e D[Commit D]\rB --\u003e E[Feature Branch: Commit E]\rE --\u003e F[Commit F]\rF --\u003e G[Merge Commit G]\rD --\u003e G\rclassDef commit fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;\rclass A,B,C,D,E,F,G commit;\rComandos esenciales para entender el DAG en Git\r#\r🛠 Comando 📘 Propósito 🧾 Explicación git log --oneline --graph --decorate --all Visualizar el grafo completo de commits Dibuja el DAG con líneas de conexión, nombres de ramas y commits compactos. git show \u0026lt;commit\u0026gt; Inspeccionar un nodo específico Muestra los detalles, cambios y metadatos de un commit individual. git diff \u0026lt;commit1\u0026gt; \u0026lt;commit2\u0026gt; Comparar dos nodos del grafo Permite ver los cambios entre dos commits, útil para estudiar su evolución. git reflog Consultar el historial interno del HEAD Muestra los movimientos recientes, ideal para recuperar commits perdidos. git cat-file -p \u0026lt;commit\u0026gt; Ver el contenido crudo de un commit Revela cómo Git almacena los objetos internamente en el grafo. git rev-parse \u0026lt;ref\u0026gt; Obtener el SHA-1 de una referencia Identifica un nodo del grafo con su hash único. git fsck Verificar la integridad del DAG Comprueba que no existan objetos corruptos o referencias rotas. Comandos que interactuan con el DAG\r#\rgraph LR\rA[git log] --\u003e DAG[🔗 DAG]\rB[git show commit] --\u003e DAG\rC[git diff commit1 commit2] --\u003e DAG\rD[git reflog] --\u003e DAG\rE[git cat-file -p commit] --\u003e DAG\rF[git rev-parse ref] --\u003e DAG\rG[git fsck] --\u003e DAG\rDAG --\u003e H[Historia de commits]\rDAG --\u003e I[Relaciones entre nodos]\rDAG --\u003e J[Estructura interna]\rclassDef cmd fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;\rclass A,B,C,D,E,F,G cmd;\rEste gráfico representa cómo diversos comandos de Git permiten explorar, inspeccionar y verificar el DAG (grafo dirigido acíclico) que modela la historia del proyecto. Cada nodo representa un commit, y las relaciones muestran cómo fluye el desarrollo del código.\rEjercicio: Explorando el DAG en Git usando comandos\r#\rA continuación, se presenta una simulación guiada por consola para construir y explorar el DAG (grafo dirigido acíclico) en Git. Cada paso está comentado para entender su propósito dentro del modelo.\nComandos\r:: ✅ Inicializar un repositorio vacío git init demo-dag cd demo-dag :: ✅ Crear el primer archivo y hacer el commit inicial echo \u0026#34;Inicio del proyecto\u0026#34; \u0026gt; index.txt git add index.txt git commit -m \u0026#34;🔨 Commit inicial\u0026#34; :: ✅ Crear una rama de desarrollo git branch develop git checkout develop :: ✅ Añadir una función en develop echo \u0026#34;Función A implementada\u0026#34; \u0026gt;\u0026gt; index.txt git commit -am \u0026#34;🧩 Añadir función A\u0026#34; :: ✅ Crear rama de feature y añadir login git checkout -b feature/login echo \u0026#34;Login básico\u0026#34; \u0026gt;\u0026gt; index.txt git commit -am \u0026#34;🔐 Crear login básico\u0026#34; :: ✅ Visualizar el grafo actual git log --oneline --graph --decorate --all :: Muestra commits conectados como nodos del DAG, junto con ramas y decoraciones :: ✅ Fusionar rama de login en develop git checkout develop git merge feature/login -m \u0026#34;🔗 Fusionar login en develop\u0026#34; :: ✅ Comparar commits git diff HEAD~1 HEAD :: Muestra diferencias entre el último y penúltimo commit :: ✅ Inspeccionar un commit específico git show HEAD :: Muestra detalles, cambios y metadatos del commit actual :: ✅ Ver movimientos del HEAD y hashes git reflog git rev-parse HEAD :: Permite rastrear navegación y obtener hash único de HEAD :: ✅ Examinar contenido interno del commit git cat-file -p HEAD :: Visualiza cómo Git representa el commit como nodo del DAG :: ✅ Verificar integridad del repositorio git fsck :: Chequea que no haya corrupción en el grafo\rGráfico\rgitGraph\rcommit id: \"🔨 Commit inicial\"\rbranch develop\rcommit id: \"🧩 Función A (develop)\"\rbranch feature/login\rcommit id: \"🔐 Login básico (feature/login)\"\rcheckout develop\rmerge feature/login tag: \"🔗 Merge login -\u003e develop\"\rcommit id: \"🛠 Ajustes post-merge (develop)\"\rcheckout main\rmerge develop tag: \"🚀 Merge develop -\u003e main\"\r"},{"id":8,"href":"/git-course/docs/module2/git-id/","title":"Git ID","section":"Modulo 2","content":"\r1 ¿Qué es un Git ID?\r#\rUn Git ID es el nombre de un objeto git Cada commit en Git tiene un identificador único: un hash SHA-1 de 40 caracteres. Este ID garantiza la integridad, unicidad y trazabilidad de cada cambio. Git usa estos IDs para comparar, referenciar y verificar commits. 2 Tipos de Git Objects\r#\rGit almacena todo como objetos en #.git/objects#. Hay cuatro tipos principales:\nTipo de objeto Contenido Función principal Comando para inspección Blob Contenido de archivos Almacena el contenido puro de un archivo git cat-file -p \u0026lt;hash\u0026gt; Tree Estructura de directorios Relaciona blobs y otros trees para formar jerarquías git cat-file -p \u0026lt;tree_hash\u0026gt; Commit Snapshot + metadatos Registra el estado del proyecto y sus padres git show \u0026lt;commit_hash\u0026gt; Tag Referencia anotada Marca versiones importantes con metadatos opcionales git cat-file -p \u0026lt;tag_hash\u0026gt; 3 Comandos para visualizar objetos Git\r#\rComando Propósito Ejemplo de uso git cat-file -t \u0026lt;hash\u0026gt; Ver el tipo de objeto (blob, tree, commit…) git cat-file -t abc1234 git cat-file -p \u0026lt;hash\u0026gt; Mostrar el contenido del objeto git cat-file -p abc1234 git show \u0026lt;hash\u0026gt; Ver detalles de commits, tags o blobs git show abc1234 git ls-tree \u0026lt;tree_hash\u0026gt; Listar contenido de un objeto tipo tree git ls-tree abc1234 git rev-parse HEAD Obtener el hash del commit actual git rev-parse HEAD git fsck --full Verificar y listar todos los objetos git fsck --full git log --oneline --graph Visualizar commits como nodos del DAG git log --oneline --graph git hash-object -w archivo.txt Crear un blob manualmente y ver su hash git hash-object -w archivo.txt 4 ¿Cómo se genera un Git ID?\r#\rGit calcula el SHA-1 del contenido + tipo + metadatos. Un cambio mínimo en el contenido genera un ID completamente distinto. Ejemplo:\necho \u0026#34;Hola mundo\u0026#34; | git hash-object --stdin ó\necho \u0026#34;Hola mundo\u0026#34; \u0026gt; fileA.txt git hash-object fileA.txt Resultado:\n110d7b83bb98c919773ff9b9ee781e71bad210ec 5 Shortening Git IDs\r#\rGit permite usar abreviaciones del hash (por ejemplo, los primeros 7–10 caracteres). Esto facilita la lectura y referencia en comandos como: git log --oneline git show abc1234 git rev-parse --short HEAD Puedes configurar la longitud con:\ngit config --global core.abbrev 10 5 Visualización del flujo de objetos\r#\rgraph TD\rA[Blob: archivo.txt] --\u003e T[Tree: raíz]\rB[Blob: main.js] --\u003e T\rT --\u003e C[Commit: snapshot]\rC --\u003e Tag[Tag: v1.0]\rclassDef obj fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;\rclass A,B,T,C,Tag obj;\r6 Ejercicio: Crear objetos Git manualmente\r#\rEste ejercicio permite crear un blob, un tree, y finalmente un commit, sin usar #git add# ni #git commit#. Todo se hace con comandos internos para revelar cómo Git construye su modelo de objetos.\n🎯 Objetivos del ejercicio\nComprender cómo Git representa archivos como blobs. Ver cómo los trees organizan blobs en estructuras de directorios. Aprender cómo los commits conectan trees y forman el DAG. Manipular objetos directamente para entender la arquitectura interna. 🖥️ Comandos\n:: ✅ Paso 1 Inicializar un repositorio vacío git init git-objects-demo cd git-objects-demo :: ✅ Paso 2 Crear un archivo y generar su blob echo \u0026#34;console.log(\u0026#39;Hola mundo\u0026#39;);\u0026#34; \u0026gt; main.js git hash-object -w main.js :: Guarda el contenido como blob y devuelve su SHA-1 :: ✅ Paso 3 Crear un árbol que apunte al blob git ls-files --stage :: Verifica el blob en el índice (debe estar vacío aún) git update-index --add main.js :: Añade el blob al índice git write-tree :: Crea un objeto tree con los blobs del índice :: Devuelve el SHA-1 del tree :: ✅ Paso 4 Crear un commit que apunte al tree GIT_AUTHOR_NAME=\u0026#34;Pedro\u0026#34; GIT_AUTHOR_EMAIL=\u0026#34;pedro[[@]]example.com\u0026#34; \\ git commit-tree \u0026lt;tree_hash\u0026gt; -m \u0026#34;🔨 Commit manual con main.js\u0026#34; :: Crea un commit que apunta al tree, sin HEAD ni rama :: ✅ Paso 5 Verificar el commit git cat-file -p \u0026lt;commit_hash\u0026gt; :: Muestra el contenido del commit: autor, fecha, mensaje y tree :: ✅ Paso 6 Crear una rama que apunte al commit git branch manual-commit \u0026lt;commit_hash\u0026gt; git checkout manual-commit :: Ahora HEAD apunta al commit creado manualmente 🎨 Estilo visual\nsequenceDiagram\rparticipant Usuario\rparticipant Git\rUsuario-\u003e\u003eGit: git init git-objects-demo\rGit--\u003e\u003eUsuario: Inicializa repositorio vacío\rUsuario-\u003e\u003eGit: echo \"Hola mundo\" \u003e main.js\rUsuario-\u003e\u003eGit: git hash-object -w main.js\rGit--\u003e\u003eUsuario: Crea blob y devuelve SHA-1\rUsuario-\u003e\u003eGit: git update-index --add main.js\rGit--\u003e\u003eUsuario: Añade blob al índice\rUsuario-\u003e\u003eGit: git write-tree\rGit--\u003e\u003eUsuario: Crea objeto tree y devuelve SHA-1\rUsuario-\u003e\u003eGit: git commit-tree tree_hash -m \"Commit manual\"\rGit--\u003e\u003eUsuario: Crea commit que apunta al tree\rUsuario-\u003e\u003eGit: git branch manual-commit commit_hash\rUsuario-\u003e\u003eGit: git checkout manual-commit\rGit--\u003e\u003eUsuario: HEAD apunta al commit creado\rUsuario-\u003e\u003eGit: git cat-file -p commit_hash\rGit--\u003e\u003eUsuario: Muestra contenido del commit\r"},{"id":9,"href":"/git-course/docs/module2/git-references/","title":"Git References","section":"Modulo 2","content":"\r1. Branch Labels \u0026amp; HEAD\r#\r1.1. Conceptos Clave\r#\rBranch labels son punteros móviles a commits. HEAD es el puntero simbólico al commit actual (usualmente el último de la rama activa). graph LR\rA[Commit A] --\u003e B[Commit B] --\u003e C[Commit C]\rC --\u003e|master| HEAD\r¿Qué es un commit en Git?\r#\rUn commit representa un punto específico en el historial del repositorio. Es una instantánea del estado de los archivos (y sus metadatos) en un momento dado. Cada commit tiene:\nUn hash único que lo identifica. Uno o más padres, salvo el inicial. git commit -m \u0026#34;Tu mensaje aquí\u0026#34; # Esto crea un nuevo commit, que hereda como “padre” el commit anterior. ¿Qué es un padre?\r#\rUn padre es simplemente el commit que precede a otro en el historial. Es la conexión que mantiene la estructura en forma de grafo dirigido (DAG). Git usa estas relaciones para reconstruir la línea de tiempo y las fusiones.\nCuando usas HEAD^, estás accediendo al padre directo del commit apuntado por HEAD. Diferencia entre “commit” y “padre”\r#\rConcepto Descripción Commit Nodo en el historial; contiene cambios, mensaje, autor y referencia única. Padre Relación entre commits; indica de dónde proviene un commit específico. Todos los padres son commits, pero no todos los commits son padres (ej. un commit puede no tener hijos si es el último).\nEjemplo visual\r#\rC0 --- C1 --- C2 (HEAD) C2 es un commit (el actual). C1 es su padre directo, accesible con HEAD^. C0 es abuelo, accesible con HEAD^^ o HEAD~2. Y si C2 fuera un merge, podría tener dos padres: C2 (merge) / \\ C1-B1 C1-B2 HEAD^ → primer padre (normalmente, rama activa). HEAD^2 → segundo padre (la rama fusionada). 1.2. Estado de HEAD y ramas\r#\rEstado HEAD apunta a Efecto en commits nuevos Rama activa Último commit de la rama Se agregan a la rama Detached HEAD Commit específico No se agregan a ninguna rama 1.3. Ejercicio práctico\r#\rgit checkout master git log --oneline --graph --decorate Haz checkout a un commit específico y observa el estado de HEAD:\ngit checkout commit_id 2. Referencias a commits anteriores (~ y ^)\r#\r2.1 Uso semántico\r#\r^: padre directo del commit. ~n: n commits hacia atrás en línea directa. graph TD\rA[\"Commit A (HEAD~3)\"]\rB[\"Commit B (HEAD~2)\"]\rC[\"Commit C (HEAD^ o HEAD~1)\"]\rD[\"Commit D (HEAD)\"]\rA --\u003e B --\u003e C --\u003e D\r2.2 Accesos relativos\r#\rReferencia Qué muestra Equivalente a HEAD^ Padre directo del commit actual HEAD~1 HEAD^^ Abuelo del commit actual HEAD~2 HEAD^^^ Bisabuelo (tercer padre en la cadena) HEAD~3 HEAD~1 Un commit atrás en línea directa HEAD^ HEAD~2 Dos commits atrás en línea directa HEAD^^ HEAD~3 Tres commits atrás en línea directa HEAD^^^ HEAD^2 Segundo padre en un commit con múltiples padres (merge) - HEAD~4 Cuatro commits atrás HEAD^^^^ master^ Padre del último commit en la rama master master~1 HEAD~0 El commit actual (sin retroceder) HEAD 2.3 Ejemplo 1\r#\rgit log --oneline git show HEAD^ git show HEAD~2 2.4 Ejemplo 2\r#\rgitGraph\rcommit id: \"C0 (main)\" tag: \"Inicio\"\rbranch B1\rcheckout B1\rcommit id: \"C1-B1\"\rcommit id: \"C2-B1\"\rcheckout main\rbranch B2\rcheckout B2\rcommit id: \"C1-B2\"\rcommit id: \"C2-B2\"\rcheckout main\rbranch B3\rcheckout B3\rcommit id: \"C1-B3\"\rcommit id: \"C2-B3\"\rcheckout B1\rmerge B2 tag: \"C3 (Merge B1+B2)\"\rcheckout B3\rmerge B1 tag: \"C4 (Merge C3+B3)\"\rCommit Qué representa Comando desde HEAD C4 (Final Merge) Último commit (merge de B3 + C3) HEAD C3 (Merge B1+B2) Primer padre del merge final HEAD^ C2-B3 Segundo padre del merge final HEAD^2 C2-B1 Padre izquierdo del merge de B1 y B2 HEAD^^ C2-B2 Segundo padre del merge entre B1 y B2 HEAD^2^ C1-B1 Commit anterior en la rama B1 HEAD^^~1 C1-B2 Commit anterior en la rama B2 HEAD^2^~1 C1-B3 Commit anterior en la rama B3 HEAD^2~1 C0 (main) Ancestro común HEAD^^~2 git show HEAD git log --graph --oneline --all 3. Tags en Git\r#\r3.1. Concepto\r#\rLos tags son referencias fijas (no móviles) a commits. Muy útiles para marcar versiones o hitos importantes. graph LR\rA[Commit A] --\u003e B[Commit B] --\u003e C[Commit C]\rC --\u003e|v1.0| Tag\r3.2. Tipos de tags\r#\rTipo Descripción Ejemplo Lightweight Puntero directo al commit git tag v1.0 Annotated Incluye metadatos y mensaje git tag -a v1.0 -m \u0026ldquo;Release v1.0\u0026rdquo; 3.3 Comandos útiles\r#\rgit tag #Muestra todos los tags en el repositorio git tag v1.0 commit_id #Especifica a que commit se coloca el tag (default HEAD) git tag -a v1.0 -m \u0026#34;Versión estable\u0026#34; git show v1.0 git push \u0026lt;remote\u0026gt; \u0026lt;tagneme\u0026gt; #Envia un solo tag git push \u0026lt;remote\u0026gt; --tags #Envia todos los tags 4. HEAD y las Referencias Simbólicas\r#\rUna referencia simbólica (symbolic reference) es un alias que apunta a otra referencia en Git. El ejemplo más común es HEAD, que normalmente apunta simbólicamente al nombre de una rama (como refs/heads/master), en lugar de a un commit específico.\nSi HEAD está vinculado simbólicamente a una rama, los commits nuevos se agregan a esa rama. Si HEAD se encuentra detached, entonces apunta directamente a un commit y no actualiza ninguna rama. 4.1 Comportamientos comunes\r#\rEstado de HEAD Tipo de referencia Apunta a Comportamiento HEAD normal Simbólica refs/heads/main Nuevos commits en rama HEAD detached Directa ID de commit (abc123) No afecta ramas 4.2 Ejemplo\r#\r# Ver la ruta simbólica de HEAD cat .git/HEAD # Resultado posible: # ref: refs/heads/main # Cambiar a un commit específico (estado detached HEAD) git checkout commit_id cat .git/HEAD # Resultado: # commit_id (ya no es una referencia simbólica) 4.3 Diagrama explicativo\r#\rgraph TD\rsubgraph Git Internals\rA[refs/heads/main → Commit D]\rB[HEAD → refs/heads/main]\rend\rstyle B fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;\rEste diagrama muestra que HEAD apunta simbólicamente a refs/heads/main, que a su vez apunta al commit actual. Si haces checkout a un commit específico, HEAD se desconecta de main y deja de ser simbólica.\n"},{"id":10,"href":"/git-course/docs/module2/git-branch/","title":"Git Branch","section":"Modulo 2","content":"\r1 ¿Qué es una rama (branch)?\r#\rUna rama es un puntero móvil que representa una línea de desarrollo dentro de tu proyecto. Permite trabajar en paralelo, experimentar funcionalidades o aislar correcciones sin alterar la rama principal (main).\nTérmino Descripción main Rama principal del proyecto. HEAD Puntero que indica el commit actual, normalmente sobre una rama. branch Puntero a un commit, que avanza a medida que se hacen nuevos commits. 2 Crear y gestionar ramas (local)\r#\r# Crear una nueva rama local git branch nombre-rama # Crear y cambiar a la nueva rama directamente git checkout -b nombre-rama Acción Comando Crear rama local git branch nueva-rama Crear y cambiar a nueva rama git checkout -b nueva-rama Listar ramas locales git branch Ver rama actual git branch --show-current 3 Gestión de ramas remotas\r#\r# Subir rama al repositorio remoto git push origin nombre-rama # Ver todas las ramas remotas git branch -r # Ver ramas locales y remotas git branch -a Acción Comando Subir rama git push origin nombre-rama Ver ramas remotas git branch -r Ver ramas locales+remotas git branch -a 4 Cambio entre ramas (checkout)\r#\rgit checkout permite cambiar el contenido del área de trabajo. Su uso más común es cambiar de rama, pero también puede:\nMover HEAD a un commit específico Restaurar archivos desde otro commit Salir o entrar en estado detached HEAD # Cambia a la rama main git checkout main # Crea y cambia a una nueva rama dev git checkout -b dev # Ver historial en esa rama git log --oneline Acción Comando Cambiar de rama git checkout rama Cambiar y crear git checkout -b nueva Restaurar archivo git checkout rama -- archivo.txt Cambiar a un commit (detached HEAD) git checkout a1b2c3d Restaura el archivo desde el último commit actual git checkout HEAD archivo.txt Extrae style.css desde la rama main al directorio actual git checkout main -- style.css 4.1 Crear Rama y Checkout\r#\rRepresenta el flujo base y la bifurcación de featureX desde master graph LR\rA1[commit A] --\u003e B1[commit B] --\u003e C1[commit C] --\u003e D1[commit D]\rC1 --\u003e FX1[\"featureX: nuevo puntero\"]\rsubgraph Ramas\rMA1(master)\rFX1(featureX)\rend\rclassDef master fill:#f9f,stroke:#333,stroke-width:2px\rclass MA1 master\rgit branch featureX git branch # * master # featureX HEAD cambia a la rama featureX\ngraph LR\rA2[commit A] --\u003e B2[commit B] --\u003e C2[commit C] --\u003e D2[commit D]\rC2 --\u003e FX2[featureX]\rsubgraph HEAD actual\rH2(HEAD → featureX)\rend\rH2 --\u003e FX2\rclassDef active fill:#cfc,stroke:#333,stroke-width:2px\rclass H2,FX2 active\rgit checkout featureX git branch # master # * featureX Comando Acción que representa Nodo clave git branch featureX Crea rama desde HEAD C git checkout featureX Mueve HEAD a featureX FX 5 Eliminar ramas (local y remoto)\r#\r# Borrar rama local (solo si ya fue fusionada) git branch -d nombre # Forzar borrado de rama local git branch -D nombre # Borrar rama remota git push origin --delete nombre Tipo Comando Uso Local git branch -d nombre Borrado seguro (fusionada) Local git branch -D nombre Borrado forzado Remoto git push origin --delete nombre Elimina rama en servidor 6 Casos comunes\r#\r6.1 Caso 1: Borrado tras merge exitos\r#\rSituación: Has completado la rama feature/navbar y la has fusionado con main.\ngit branch -d feature/navbar 6.2 Caso 2: Rama obsoleta sin fusionar\r#\rSituación: Se creó feature/old-config, pero nunca se integró ni se volverá a usar.\ngit branch -D feature/old-config 6.3 Caso 3: Borrar rama remota tras integración\r#\rSituación: Has fusionado hotfix/login-error en main y subido todo al remoto.\ngit push origin --delete hotfix/login-error # Complementa con git fetch --prune si se quiere limpiar referencias remotas localmente. 6.4 Caso 4: Intento de eliminar rama activa\r#\rSituación: Estás situado en feature/invoice. Intentas borrarla y Git lanza error.\ngit checkout main git branch -d feature/invoice # recordar el uso de HEAD y cómo Git protege la rama activa 6.5 Caso 5: Limpieza mensual de ramas ya fusionadas\r#\rSituación: Quieres eliminar todas las ramas locales que ya se fusionaron con main.\ngit branch --merged main | grep -v \u0026#39;\\*\u0026#39; | xargs git branch -d 7 ¿Qué es un dangling commit?\r#\rUn dangling commit es un commit que no tiene referencias vivas apuntando a él: ninguna rama, tag ni HEAD. Existen en el repositorio, pero están “huérfanos”. Pueden generarse por errores, rebases incompletos o eliminación de ramas sin merge.\n7.1 Escenario 1: Eliminar una rama sin hacer merge\r#\rSituación: Se trabajó en feature/test, se hicieron varios commits, pero luego la rama se elimina sin merge. git branch -D feature/test\nResultado: Los commits sobreviven temporalmente como dangling, pero no son accesibles por comandos normales. Reforzamiento CLI:\ngit fsck --lost-found Git no borra los datos inmediatamente, sino que los aparta. 7.2 Escenario 2: Rebase interrumpido\r#\rSituación: Un rebase falla a mitad de camino y los commits originales quedan sin referencias.\ngit rebase -i HEAD~3 # cancelas el rebase a medias Resultado: Los commits anteriores pueden quedar como dangling si no se recuperan.\n7.3 Escenario 3: Reset duro\r#\rSituación: Se hace un hard reset a un commit anterior, eliminando commits recientes.\ngit reset --hard HEAD~2 # considerar a diferenciar --soft, --mixed, y --hard, y sus efectos en el historial Resultado: Los dos commits descartados quedan sin referencias → dangling. 🧠 Genial para enseñar .\n8 El registro secreto de Git\r#\rgit reflog muestra el historial completo de movimientos de HEAD, incluyendo acciones que no aparecen en git log, como rebases, resets, checkouts, merges fallidos y cambios temporales. Es ideal para recuperar commits perdidos, visualizar el flujo reciente del repositorio y diagnosticar errores complejos.\n# Muestra los cambios recientes en HEAD y otros punteros locales git reflog # Reflog de la rama específica featureX git reflog show featureX # Revierte el estado del repositorio al punto 2 pasos atrás según el reflog git reset --hard HEAD@{2} 8.1 Ejemplo típico\r#\rgit commit -m \u0026#34;Cambio experimental\u0026#34; git reset --hard HEAD~1 git reflog Aunque el commit “Cambio experimental” desaparece del log, ¡aún puedes verlo y restaurarlo con reflog!\ngit checkout HEAD@{1} git branch restaurada 8.2 Resumen de usos de git reflog\r#\rCaso de uso Comando Resultado Ver cambios recientes de HEAD git reflog Lista numerada de acciones Revertir a estado anterior git reset --hard HEAD@{n} Estado del repo retrocedido Recuperar commit huérfano git checkout HEAD@{n} Permite crear nueva rama "},{"id":11,"href":"/git-course/docs/module2/git-merge-i/","title":"Git Merge I","section":"Modulo 2","content":"\r1 ¿Qué es un merge en Git?\r#\rUn merge en Git es una operación que integra el historial de dos ramas distintas en una sola. Esto permite unir cambios realizados en flujos paralelos de trabajo, manteniendo la coherencia del proyecto.\nInternamente, Git compara los historiales de las ramas implicadas para encontrar su antecesor común (conocido como base del merge), y luego aplica los cambios divergentes.\n2 ¿Cómo afecta al DAG?\r#\rGit no trabaja con archivos directamente, sino con un grafo acíclico dirigido (DAG) de commits. Cada merge altera esta estructura:\nEn un merge commit, se crea un nodo con dos padres: uno de la rama actual y otro de la rama fusionada. En un fast-forward, el puntero simplemente avanza sin modificar la topología del DAG. ¿Cuándo ocurre un merge?\nSituación Ejemplo técnico Finalizar una rama de desarrollo git merge feature/login Unificar cambios tras resolución de conflictos git merge bugfix/menu Colaboración multiusuario con ramas divergentes git merge otra_rama 3 Tipos de merge en Git\r#\r3.1 Fast-forward\r#\rEs una estrategia de fusión en Git donde la rama base no ha avanzado desde que se bifurcó la rama secundaria. En este caso, Git simplemente mueve el puntero de la rama base al último commit de la rama secundaria, sin crear un nuevo commit de merge. No modifica la estructura del DAG, y se percibe como una extensión lineal del historial\nAntes vs. después en el DAG\r#\rSituación antes del merge\r#\rgitGraph\rcommit id:\"A\" tag:\"main\"\rcommit id:\"B\"\rbranch featureX\rcheckout featureX\rcommit id:\"C\"\rmain apunta a A. featureX contiene nuevos commits (B, C) que no existen en main. Después del merge fast-forward\r#\rgitGraph\rcommit id:\"A\"\rcommit id:\"B\"\rcommit id:\"C\" tag:\"main\"\rmain avanza hasta C (el mismo nodo que featureX). No se genera nuevo commit de merge. Se conserva historia limpia y lineal. Comparativa: Local vs. Remoto\r#\rRepositorio Local\r#\rIdeal para flujos individuales o ramas que no sufrieron interferencia. Ejemplo: git checkout main git merge featureX Si main no cambió desde el nacimiento de featureX, el merge será fast-forward Repositorio Remoto\r#\rSi otros contribuyeron a main, Git no permite fast-forward automáticamente. En Pull Requests, se suele generar merge commit para preservar historial de colaboración. git fetch origin git checkout main git merge --ff-only origin/featureX --ff-only garantiza que solo se ejecuta el merge si es fast-forward.\nEscenarios comunes de uso\r#\rContexto Estrategia recomendada Desarrollo aislado Fast-forward Hotfix rápido Fast-forward Feature terminada sin conflictos Fast-forward Revisión de cambios entre equipos Merge commit Pull Request en GitHub Merge commit (por defecto) Buenas prácticas\r#\rUsar fast-forward cuando:\nSe desea un historial limpio y lineal. No hubo interferencias con la rama base (main). El trabajo fue exclusivo de una rama y puede integrarse sin perder contexto. Evitar fast-forward cuando:\nSe quiere conservar la separación lógica del trabajo (ej. colaboraciones). Se desea tener trazabilidad de integración por revisiones o QA. Se usa un modelo como Git Flow, donde cada integración tiene importancia documental. Ejemplo\r#\r# flujo local con fast-forward git checkout featureX git commit -m \u0026#34;Desarrollo terminado\u0026#34; git checkout main git merge featureX # merge rápido, sin conflictos # visualizar el DAG (simplificado) git log --oneline --graph --all 3.2 Merge commit\r#\rUn merge commit es un tipo de fusión en Git que genera un nuevo commit con dos padres, unificando dos historiales divergentes. Es usado cuando ambas ramas han progresado desde el punto de bifurcación y no puede aplicarse una estrategia fast-forward.\nEste tipo de merge:\nPreserva la historia completa de ambas ramas. Mantiene la topología del DAG acíclico. Crea un punto claro de integración para auditoría, revisión y navegación. Antes y Después de ejecutar el merge\r#\rSituación antes del merge (historial divergente)\r#\rgitGraph\rcommit id:\"A\"\rcommit id:\"B\"\rbranch featureX\rcheckout featureX\rcommit id:\"C\"\rcheckout main\rcommit id:\"D\"\rfeatureX tiene commit C exclusivo. main avanzó hasta D, separándose del punto de bifurcación B. Después del merge commiT\r#\rgitGraph\rcommit id:\"A\"\rcommit id:\"B\"\rbranch featureX\rcheckout featureX\rcommit id:\"C\"\rcheckout main\rcommit id:\"D\"\rmerge featureX tag:\"Merge commit\"\rEjemplos prácticos: local vs remotO\r#\rEn repositorio local\r#\rgit checkout main git merge featureX Si main y featureX tienen commits distintos → se genera merge commit. Puedes verificar con git log --graph --oneline En repositorio remoto\r#\rOpción: Merge commit por defecto en Pull Request Al aceptar un PR, GitHub genera un merge commit por defecto (a menos que elijas squash o rebase). Ejemplo visual:\n* Merge pull request #42 from featureX |\\ | * commit C * | commit D Si se hace merge local y luego push\ngit merge featureX # crea merge commit git push origin main # sube DAG completo al remoto Escenario de uso\r#\rEscenario ¿Por qué usar merge commit? Pull Requests entre ramas divergentes Auditoría clara, contexto colaborativo Integración de hotfix urgente mientras se desarrolla un feature Separación lógica del flujo Revisión de ramas por QA antes de despliegue Permite rastrear qué fue revisado y cuándo Implementaciones por múltiples desarrolladores Documenta el momento exacto de integración Uso de Git Flow u otros flujos estructurados Cada fase tiene su propio commit de merge documentado Buenas prácticas al usar merge commit\r#\rEscribe mensajes claros en los commits de merge. Ejemplo: git merge featureX -m \u0026#34;Merge \u0026#39;featureX\u0026#39;: añade soporte a OAuth\u0026#34; Evita conflictos innecesarios sincronizando tu rama base: git checkout main git pull origin main No borres ramas antes del merge. Preserva el historial para auditar. Documenta fusiones importantes en la historia del proyecto, especialmente si están ligadas a releases, QA o decisiones de negocio. 4 Visualizaciones del concepto de merge\r#\rDiagrama 1: Merge commit (historia bifurcada + unificación) gitGraph\rcommit id:\"A\"\rcommit id:\"B\"\rbranch featureX\rcheckout featureX\rcommit id:\"C\"\rcheckout main\rcommit id:\"D\"\rmerge featureX tag:\"Merge commit\"\rEl commit final tiene dos padres: uno de main, otro de featureX.\nDiagrama 2: Fast-forward (avance lineal del puntero) gitGraph\rcommit id:\"A\"\rcommit id:\"B\"\rbranch featureY\rcheckout featureY\rcommit id:\"C\"\rcheckout main\rmerge featureY\rmain simplemente avanza al commit C. No hay nuevos nodos.\n4 Tabla resumen\r#\rTipo de merge Crea commit nuevo Conserva historia de ambas ramas Uso recomendado Fast-forward No Parcial Proyectos lineales Merge commit Sí Completa Equipos colaborativos "},{"id":12,"href":"/git-course/docs/module3/git-conflicts/","title":"Resolving Merge Conflicts","section":"Modulo 3","content":"\r1 Revisión de los merges en los conflictos\r#\r1.1 ¿Por qué ocurren los conflictos?\r#\rLos conflictos de merge se presentan cuando Git no puede aplicar automáticamente los cambios porque dos ramas han editado la misma línea o zona de un archivo, y no sabe cuál conservar. Git detiene el merge e indica que el usuario debe intervenir manualmente.\n1.2 Comprobación de estado antes del merge\r#\rgit status Git indica los archivos con conflictos usando mensajes como:\nUnmerged paths: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) both modified: archivo.txt Ver los cambios implicados\ngit diff O para ver el conflicto directamente en el archivo:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Contenido desde rama base (ej. main) ======= Contenido desde rama fusionada (ej. featureX) \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; featureX Este marcador indica el área del conflicto.\n1.3 Opciones de inspección visual\r#\rgit log \u0026ndash;merge: muestra los commits en conflicto. gitk o herramientas GUI (Visual Studio Code, GitKraken) pueden facilitar la comparación visual. 1.4 Buenas prácticas para revisión\r#\rConfirmar en qué parte del código se superponen los cambios. Evitar resolver el conflicto sin comprender su causa. Consultar al autor del otro cambio si es necesario. 2 Resolviendo un conflicto de merge\r#\rCuando Git detecta un conflicto al intentar fusionar dos ramas, intervienen tres commits fundamentales:\nCommit B – El último commit en la rama actual (ej. main). También conocido como \u0026ldquo;ours\u0026rdquo; o \u0026ldquo;mine\u0026rdquo; Commit C – El último commit en la rama que se desea integrar (ej. featureX). Refiere a \u0026ldquo;theirs\u0026rdquo; Commit A – El antecesor común de ambas ramas. Conocido como \u0026ldquo;merge base\u0026rdquo; Git utiliza estos tres puntos para calcular las diferencias y generar los marcadores de conflicto en los archivos afectados. graph LR\rHEAD[HEAD]:::puntero --\u003e master[master]:::rama\rmaster --\u003e A[Commit A - Merge Base]:::base\rA --\u003e B[Commit B - Ours]:::actual\rA --\u003e C[Commit C - Theirs]:::externa\rC --\u003e featureX[featureX]:::rama\r%% Etiquetas explicativas\rA --\u003e|merge base| A\rB --\u003e|ours| B\rC --\u003e|theirs| C\r%% Estilos personalizados\rclassDef puntero fill:#fff3e0,stroke:#ff6f00,stroke-width:2px,rx:10\rclassDef rama fill:#e8f5e9,stroke:#388e3c,stroke-width:2px,rx:10\rclassDef base fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10\rclassDef actual fill:#e3f2fd,stroke:#1565c0,stroke-width:2px,rx:10\rclassDef externa fill:#fce4ec,stroke:#c2185b,stroke-width:2px,rx:10\rPasos para resolver conflictos manualmente:\nEditar el archivo afectado (fileA.txt). Revisa el contenido conflictivo y decide qué fragmentos conservar: los tuyos (ours), los externos (theirs), o una mezcla de ambos. Eliminar los marcadores de conflicto. Borra las líneas especiales que Git inserta: \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD ...tu contenido... ======= ...contenido de featureX... \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; featureX Guardar los cambios y preparar el archivo para el commit. Agrega el archivo al staging area con: git add fileA.txt Completar el merge con un commit. Git reconocerá que el conflicto fue resuelto y permitirá finalizar la fusión: git commit -m \u0026#34;Conflicto resuelto entre master y featureX\u0026#34; (Opcional) Eliminar la rama featureX si ya no se necesita git branch -d featureX Simulación de conflicto de merge: flujo completo desde GitHub\r#\rRama master: flujo y cambio\r#\r# 🌐 Clonar repo remoto y entrar al proyecto git clone https://github.com/tuusuario/conflicto-demo.git cd conflicto-demo # 📝 Crear archivo base en master echo \u0026#34;Línea original\u0026#34; \u0026gt; archivo.txt git add archivo.txt git commit -m \u0026#34;Commit inicial en master\u0026#34; # ✏️ Realizar cambio divergente en master echo \u0026#34;Cambio desde master\u0026#34; \u0026gt; archivo.txt git commit -am \u0026#34;Cambio desde master\u0026#34; # 🚀 Push hacia remoto git push origin master Rama featureX: creación y cambio\r#\r# 🌿 Crear rama featureX desde master git checkout -b featureX # ✏️ Realizar cambio distinto en featureX echo \u0026#34;Cambio desde featureX\u0026#34; \u0026gt; archivo.txt git commit -am \u0026#34;Cambio desde featureX\u0026#34; # 🚀 Push hacia remoto git push origin featureX Intento de merge y resolución del conflicto (en master)\r#\r# 📍 Volver a master y traer cambios remotos git checkout master git pull origin master # 🔄 Intentar merge con featureX git merge featureX # ⛔ Aparece conflicto en archivo.txt # 🛠️ Resolver manualmente el conflicto echo \u0026#34;Resolución combinada del conflicto\u0026#34; \u0026gt; archivo.txt git add archivo.txt git commit -m \u0026#34;Conflicto resuelto manualmente entre master y featureX\u0026#34; # 🚀 Push del merge resuelto al remoto git push origin master # 🧹 (Opcional) Eliminar rama integrada git branch -d featureX git push origin --delete featureX graph TD\rRemoteRepo[\"🌐 Repositorio remoto en GitHub\"]:::remoto\rLocalClone[\"🖥️ Clonación en local\"]:::local\rA[\"🟠 Commit A - Línea original\"]:::base\rB[\"🔵 Commit B - Cambio en master\"]:::master\rC[\"🟣 Commit C - Cambio en featureX\"]:::featureX\rMerge[\"⛔ Merge con conflicto\"]:::error\rRemoteRepo --\u003e LocalClone\rLocalClone --\u003e A\rA --\u003e B\rA --\u003e C\rB --\u003e Merge\rC --\u003e Merge\rclassDef remoto fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,rx:10\rclassDef local fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px,rx:10\rclassDef base fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10\rclassDef master fill:#e3f2fd,stroke:#1565c0,stroke-width:2px,rx:10\rclassDef featureX fill:#fce4ec,stroke:#c2185b,stroke-width:2px,rx:10\rclassDef error fill:#ffebee,stroke:#c62828,stroke-width:2px,rx:10\r4 Tabla resumen\r#\rAcción Comando CLI Ver archivos en conflicto git status Identificar diferencias git diff Resolver manualmente Editar + git add Confirmar resolución git commit Cancelar el merge git merge --abort Forzar contenido de rama actual git checkout --ours \u0026lt;archivo\u0026gt; Forzar contenido fusionado git checkout --theirs \u0026lt;archivo\u0026gt; "},{"id":13,"href":"/git-course/docs/module3/git-tracking-branch/","title":"Git Tracking Branch","section":"Modulo 3","content":"\r1 ¿Qué es una tracking branch?\r#\rUna tracking branch es una rama local que está vinculada a una rama remota. De forma local el nombre de una rama de rastreo comienza con el nombre remoto, luego una barra diagonal y despues el nombre de la rama (\u0026lt;remote\u0026gt;/\u0026lt;branch\u0026gt;). Su función principal es hacer seguimiento de los cambios en el remoto, facilitando comandos como:\ngit pull # Trae cambios del remoto a tu rama local git push # Envía tus commits al remoto correspondiente Se crean automáticamente al clonar un repo o manualmente con opciones como --set-upstream.\nflowchart LR\rsubgraph Local_Repo\rC[Commit A] --\u003e A[\"main (local)\"]\rD[Commit B] --\u003e A\rend\rsubgraph Remote_Repo\rF[Commit C] --\u003e E[origin/main]\rG[Commit D] --\u003e E\rend\r%% tracking relationship (visual punteado)\rA -. tracking branch .-\u003e E\r%% flujo conceptual de sincronización\rA --\u003e X[git push]\rE --\u003e Y[git fetch/pull]\r2 ¿Qué es HEAD en Git?\r#\rHEAD es un puntero que indica tu posición actual en el historial de commits. En una situación normal, HEAD apunta a la rama activa (por ejemplo, master), y esa rama a su vez apunta a su último commit.\n# Ver el puntero actual git rev-parse HEAD # Muestra el hash del commit actual git symbolic-ref HEAD # Muestra a qué rama está apuntando HEAD (ej: refs/heads/master) 2.1 HEAD y las tracking branches\r#\rCuando trabajas con una rama local que sigue a una remota (origin/master), el flujo se ve así:\nHEAD → master → Commit X ↑ tracking: origin/master → Commit Y ¿Qué implica esto?\r#\rSi origin/master tiene commits nuevos que no están en master, Git te avisará que tu rama local está behind. Si tu master local tiene commits que no están en origin/master, Git dirá que estás ahead. Esto se puede verificar con git status # Indicará si estás ahead/behind git fetch # Trae datos actualizados del remoto git branch -vv # Muestra el tracking y la distancia con el remoto Ejemplo\r#\rSupongamos que estás en master, que está vinculado a origin/master.\n# HEAD apunta a master HEAD → master # master sigue a origin/master master ──▶ origin/master Ahora haces un nuevo commit en master local:\necho \u0026#34;Nuevo contenido\u0026#34; \u0026gt; archivo.txt git add archivo.txt git commit -m \u0026#34;Cambios locales\u0026#34; El commit existe en master, pero aún no en origin/master. Si ejecutas:\ngit status Verás algo como:\nYour branch is ahead of \u0026#39;origin/master\u0026#39; by 1 commit. Esto indica que HEAD está en una rama local que tiene cambios no sincronizados con su rama remota tracking\n2.2 Resumen: Estados de HEAD en relación con la rama remota\r#\rEstado local HEAD apunta a\u0026hellip; Relación con rama remota (origin/\u0026lt;branch\u0026gt;) Acción sugerida Synced Último commit de la rama local Mismo commit que rama remota Ninguna, estás al día Ahead Commit más nuevo que el remoto Local tiene commits que el remoto no tiene git push para sincronizar Behind Commit más antiguo que el remoto Remoto tiene commits nuevos git pull para actualizar Diverged Commit exclusivo en ambos lados Cada uno tiene commits no compartidos git pull --rebase o merge 3 Visualización de nombres de tracking branches\r#\rCuando trabajas con ramas que rastrean remotas (tracking branches), es útil entender cómo visualizar esa relación desde distintos comandos\n3.1 Comandos clave\r#\rComando ¿Para qué sirve? git branch Lista ramas locales git branch \u0026ndash;all Lista locales + remotas (remotes/origin/\u0026hellip;) git branch -vv Muestra qué rama local sigue a qué remota, y si está ahead/behind git log origin/master \u0026ndash;oneline Ver historial remoto sin cambiar de rama git symbolic-ref HEAD Ver qué rama está apuntando HEAD (ej: refs/heads/master) git remote set-head origin \u0026lt;branch\u0026gt; Cambia la rama por defecto del remoto (ej. develop) 3.2 Ejemplo CLI: visualización y cambio del HEAD remoto\r#\r# Ver todas las ramas (locales + remotas) git branch --all # Salida esperada # * main # remotes/origin/HEAD -\u0026gt; origin/master # remotes/origin/main # remotes/origin/develop # Ver a qué rama apunta HEAD del remoto git symbolic-ref refs/remotes/origin/HEAD # remotes/origin/master # Cambiar HEAD remoto a \u0026#39;develop\u0026#39; git remote set-head origin develop # Confirmar cambio git symbolic-ref refs/remotes/origin/HEAD # remotes/origin/develop flowchart LR\rsubgraph Local\rA[main]\rB[develop]\rend\rsubgraph Remote [origin]\rC[origin/main]\rD[origin/develop]\rE[\"origin/HEAD ➜ origin/develop\"]\rend\rA -. tracks .-\u003e C\rB -. tracks .-\u003e D\rramas locales y su relación con remota\n4 Visualización del estado de seguimiento (tracking status)\r#\r4.1 Comandos clave\r#\rComando Función git status Muestra si la rama local está ahead, behind, o up to date git fetch Actualiza la información remota sin alterar tu historial local git log \u0026ndash;all \u0026ndash;oneline \u0026ndash;graph Visualiza commits con relación entre ramas, ideal para entender divergencias 4.12 Ejemplo CLI: rama main con commits nuevos (estado ahead)\r#\r# Ver estado actual git status # Salida esperada # On branch main # Your branch is ahead of \u0026#39;origin/main\u0026#39; by 2 commits. # Visualización gráfica del historial git log --all --oneline --graph # Ejemplo de salida: # * 9e3a7d2 (main) Fix typo in docs # * b2c61e4 Add helper module # | * 5d2f5b1 (origin/main) Initial commit # |/ gitGraph\rcommit id: \"Commit remoto\" tag: \"origin/main\"\rcommit id: \"Commit local 1\"\rcommit id: \"Commit local 2\" tag: \"HEAD ➜ main\"\r"},{"id":14,"href":"/git-course/docs/module3/git-networking/","title":"Git Networking","section":"Modulo 3","content":"\r1 Git Networking: clone, fetch, pull, push\r#\rEstos comandos controlan la comunicación entre tu repositorio local y el remoto (origin). Cada uno tiene un rol específico en la sincronización de datos:\nComando ¿Qué hace? ¿Modifica el árbol de trabajo local? git clone Crea una copia del repositorio remoto en local ✅ Sí git fetch Trae los cambios del remoto pero no los aplica ❌ No git pull Equivale a fetch + merge o rebase ✅ Sí git push Envía tus commits locales al repositorio remoto ❌ No (actúa sobre el remoto) 1.1 Escenario base: git clone\r#\r# Clonar un repositorio remoto git clone https://github.com/usuario/mi-repo.git cd mi-repo # Ver ramas remotas git branch -r gitGraph\rcommit id: \"Commit remoto A\" tag: \"origin/main\"\rcheckout main\rcommit id: \"Commit local A (copiado por clone)\" tag: \"HEAD ➜ main\"\r1.2 Sincronización: fetch\r#\r¿Qué es git fetch?\r#\rgit fetch es un comando que sincroniza tu repositorio local con el remoto sin alterar tu historial local. Es una forma segura de actualizar tus referencias a lo que ha ocurrido en el repositorio remoto (como nuevos commits o ramas), sin aplicar esos cambios directamente en tu trabajo actual.\n¿Qué hace exactamente?\r#\rContacta el remoto (origin, por ejemplo) y descarga nuevos commits, ramas o etiquetas. Actualiza las referencias remotas como origin/main, origin/feature-x, etc. No modifica tu rama actual (main, por ejemplo), ni realiza fusiones automáticamente. Ideal para revisar antes de tomar decisiones: puedes inspeccionar los cambios antes de merge o rebase. Ejemplo: usando git fetch\r#\r# Traer referencias remotas sin modificar el árbol local git fetch origin # Ver diferencias git log HEAD..origin/main --oneline 1.3 Sincronización: git pull\r#\r¿Qué es git pull?\r#\rgit pull es un comando compuesto que sincroniza una rama local con su contraparte remota. Internamente, Git lo descompone así:\ngit fetch: descarga los últimos cambios del remoto, sin aplicarlos. git merge FETCH_HEAD: aplica (fusiona) esos cambios sobre la rama local activa `FETCH_HEAD` es un puntero temporal que Git usa para referenciar los datos recién traídos por fetch.\rEjemplo: usando pull\r#\r# Obtener y fusionar cambios git pull origin main # Ver historial git log --oneline --graph --decorate Ejemplo CLI: flujo interno de git pull\r#\r# Paso explícito (fetch manual) git fetch origin main # `FETCH_HEAD` ahora apunta al último commit remoto cat .git/FETCH_HEAD # Fusionamos manualmente los cambios traídos git merge FETCH_HEAD # Esto es exactamente lo que hace git pull origin main 1.4 Opciones de fusión local en git pull y git merge\r#\rLas opciones de merging strategy determinan cómo Git fusiona los commits locales y remotos cuando hay diferencias.\nOpción Comportamiento ¿Cuándo usarlo? --ff Fast-forward si es posible (default); no crea commit de merge Historial lineal, sin conflictos --no-ff Siempre crea commit de merge, incluso si puede hacer fast-forward Para preservar historia de integración --ff-only Solo acepta fast-forward; falla si requiere merge Evita commits de merge --rebase Reescribe historial local encima de los commits remotos Para mantener un historial limpio --rebase=merges / --rebase --preserve-merges Reescribe con conservación de merges Útil en equipos que usan integración estructurada Ejemplo CLI: uso de opciones\r#\r# Pull con fast-forward automático (default) git pull --ff origin main # Pull con commit de merge forzado git pull --no-ff origin main # Pull solo si se puede fast-forward (falla si hay divergencia) git pull --ff-only origin main # Pull con rebase (evita commits de merge) git pull --rebase origin main 1.4.1 Git pull usando fast-forward\r#\r¿Cuándo ocurre un fast-forward?\nGit puede aplicar un fast-forward si:\nEstás en una rama local (ej. main) sin commits nuevos. La rama remota (origin/main) tiene commits más avanzados. Ambas ramas comparten un historial lineal sin divergencia. El pull se resuelve avanzando el puntero local al nuevo commit remoto, sin crear un commit de merge. Escenario típico:\nTu rama local está desactualizada pero intacta. Al ejecutar:\n# Ver estado actual git status # Actualizar con fast-forward git pull --ff origin main # Confirmar resultado git log --oneline --graph Antes del pull: origin/main: A---B---C local: A Después del pull (fast-forward aplicado): origin/main: A---B---C local: A---B---C ← HEAD actualizado La rama local simplemente avanzó. No hay commit extra ni línea de fusión. Esto es lo que representa --ff: un avance limpio del puntero.\r1.4.2 Git pull con conflictos de cambios no comiteados\r#\r¿Cuándo ocurre este escenario? Sucede cuando:\nTu rama local está detrás de la remota (estado behind). Git podría aplicar un fast-forward\u0026hellip; \u0026hellip;pero tienes cambios modificados localmente que entran en conflicto con los commits remotos. No se puede aplicar el pull hasta que resuelvas los cambios locales (conflicto entre el árbol de trabajo y el historial remoto). Escenario típico:\n# Simulamos una edición local en conflicto echo \u0026#34;Cambios locales\u0026#34; \u0026gt;\u0026gt; index.html # Estado antes del pull git status # Intentar hacer un pull fast-forward git pull --ff origin main ### Merge commit (--no-ff) 🔴 Resultado:\nerror: Your local changes to the following files would be overwritten by merge: index.html Please commit your changes or stash them before you merge. Aborting Remoto: A---B---C (origin/main) Local: A---(cambios sin confirmar) \\ \\ ← HEAD en A con index.html modificado git pull --ff ✘ error: no se puede avanzar sin perder cambios locales ¿Cómo resolverlo?\n# Opción 1: confirmar cambios locales git add index.html git commit -m \u0026#34;Cambios locales\u0026#34; git pull --ff origin main # Ahora puede hacer merge si es posible # Opción 2: guardar los cambios temporalmente git stash git pull --ff origin main # Se aplicará el fast-forward git stash pop # Recuperas tus ediciones 1.4.3 Git pull con merge (--no-ff)\r#\r¿Cuándo se usa --no-ff?\nEn ramas colaborativas (como feature-x, hotfix, etc.) donde quieres mantener un punto de unión explícito. Evita que Git simplemente avance la rama (fast-forward) como si los cambios vinieran del mismo flujo. Se crea un commit de merge, incluso si el historial permitiría avanzar directamente Escenario típico:\n# Nos aseguramos de tener una divergencia local/remota git fetch origin # Intentamos hacer un pull con merge explícito git pull --no-ff origin main 🔵 Resultado\nMerge made by the \u0026#39;recursive\u0026#39; strategy. files changed: 2 create mode: foo.js Esto crea un commit de tipo \u0026ldquo;merge\u0026rdquo;, agrupando las diferencias locales y remotas.\nRemoto: A---B---C (origin/main) \\ Local: D---E (main local) \\ \\__ ⬅️ Merge commit con --no-ff F Resultado: A---B---C---F (main) / \\ D-----E Aquí, F es un commit de merge explícito, que preserva el origen de los cambios. No se aplastan (squash) ni se avanza en línea recta.\rVentajas de --no-ff\nHistorial más legible para auditorías y revisión de código. Útil en flujos tipo feature branches donde se quiere conservar el contexto completo de la fusión. Permite revertir cambios en bloque (por commit de merge) 1.5 Sincronización: push\r#\rEl comando git push envía los commits locales al repositorio remoto, actualizando la rama correspondiente allí (como origin/main). Es fundamental para compartir tu trabajo con otros colaboradores o simplemente sincronizar tu copia local con el remoto\nEscenario típico:\n# Agregamos un cambio local echo \u0026#34;Nueva sección\u0026#34; \u0026gt;\u0026gt; archivo.md git add archivo.md git commit -m \u0026#34;Agrega nueva sección\u0026#34; # Enviamos al remoto git push origin main 1.5.1 ¿Qué hace la opción -u ?\r#\rLa opción -u (forma corta de \u0026ndash;set-upstream) define una relación de seguimiento entre tu rama local y la remota. Esta relación hace que futuros git push y git pull se puedan ejecutar sin especificar la rama:\ngit push -u origin main Este comando:\nEnvía la rama main al remoto origin. Configura main como tracking branch de origin/main. Permite usar simplemente git pull o git push en adelante, sin indicar origin main 1.5.2 Diagnóstico de seguimiento con -vv\r#\rgit branch -vv * main abc1234 [origin/main] Agrega nueva sección Aquí el [origin/main] indica que main sigue a la rama remota, gracias al -u\rAntes del push: Local: A---B (main) Remoto: A (origin/main) Después del push -u: Local: A---B (main \u0026lt;-\u0026gt; origin/main) Remoto: A---B (origin/main) El símbolo \u003c-\u003e representa la relación de seguimiento establecida por `-u`\r1.5.3 Buenas prácticas\r#\rUsa git push -u origin \u0026lt;branch\u0026gt; al crear una rama nueva, para facilitar futuras operaciones. Si ya hiciste push, puedes agregar el upstream con: git branch --set-upstream-to=origin/main 1.5.4 Errores frecuentes en git push\r#\r🔍 Mensaje CLI 💬 Explicación clara 💡 Solución didáctica rejected El remoto tiene commits que tú no tienes. Usa git pull primero para sincronizar. non-fast-forward Tu push sobrescribe historia existente. Git lo bloquea por seguridad. Usa git pull --rebase o git push --force-with-lease con cautela. no upstream configured La rama local no tiene una rama remota asociada. Añade upstream: git push -u origin \u0026lt;branch\u0026gt; permission denied No tienes acceso al remoto (credenciales, permisos, SSH). Verifica token de acceso, SSH keys o tus privilegios. fatal: repository not found URL incorrecta o el repo no existe (a veces error de autenticación). Verifica la URL del remoto: git remote -v 1.5.5 Alternativas de push para casos conflictivos\r#\rgit push --force ✅ Reescribe la rama remota sin pedir permiso. ⛔ Puede borrar commits ajenos: peligroso para repos colaborativos.\ngit push --force-with-lease ✅ Fuerza el push solo si nadie más ha actualizado el remoto desde tu último pull. 👍 Más seguro: evita sobrescribir trabajo reciente de otros\nSituación: conflicto de ramas Local: A---B---C (main) Remoto: A---B---X (origin/main) Intento de push: ❌ rejected (non-fast-forward) Resolución: ✅ pull --rebase ✅ push --force-with-lease El commit X en remoto no está en local. Por eso el push se rechaza hasta resolver el conflicto\r"},{"id":15,"href":"/git-course/docs/module3/git-rebase/","title":"Git Rebase","section":"Modulo 3","content":"\r1 Rebasing en Git: Reescribiendo el historial con propósito\r#\rRebasing consiste en reaplicar commits de una rama sobre otra, como si se hubieran creado a partir de una base diferente. Se utiliza para mantener el historial limpio y lineal.\n1.1 Formas de ejecutar un rebase\r#\r# 1. Rebase simple (desde HEAD actual) git rebase \u0026lt;upstream\u0026gt; # 2. Rebase explícito entre dos ramas git rebase \u0026lt;upstream\u0026gt; \u0026lt;topic-branch\u0026gt; ¿Qué hace cada uno?\nComando Acción git rebase main Reaplica tus commits locales sobre main (desde la rama actual) git rebase main feature Reaplica feature sobre main, sin cambiar de rama 1.2 Ejecución básica del rebase\r#\r# Estás en la rama feature git checkout feature # Reaplicas los commits de feature sobre main git rebase main Esto mueve los commits únicos de feature para que partan desde la punta de main.\rAntes del rebase: main: A---B---C feature: D---E Después del rebase: main: A---B---C feature: D\u0026#39;--E\u0026#39; Los commits D y E se reescriben como D' y E', simulando que se crearon después de C.\r1.3 Tipos de Rebase\r#\rTipo Características Uso recomendado Rebase regular Reaplica commits automáticamente, sin intervención manual Flujo simple y rápido Rebase interactivo (-i) Permite editar, combinar (squash), eliminar (drop) y reordenar commits Preparación antes de integración (presentación, limpieza de historial) Ejemplo interactivo\ngit rebase -i main Y el editor muestra:\npick abc123 Añade login básico pick def456 Refactoriza validaciones pick ghi789 Corrige errores tipográficos Puedes reemplazar pick por:\nreword: cambia mensaje squash: fusiona con anterior drop: elimina el commit 1.4 Rebasing con conflictos de merge\r#\rCuando los commits que se van a reaplicar modifican los mismos archivos que la base, surgen conflictos:\ngit rebase main # ❌ CONFLICT (content): Merge conflict in index.html # Resolución paso a paso # Editas manualmente el archivo # Luego marcas como resuelto: git add index.html # Continúas el rebase: git rebase --continue # O puedes abortar: git rebase --abort 1.5 Simulación CLI: rebasing con conflicto\r#\r1 Crear repositorio de prueba.\nmkdir repo-rebase-conflicto cd repo-rebase-conflicto git init echo \u0026#34;Línea A\u0026#34; \u0026gt; archivo.txt git add archivo.txt git commit -m \u0026#34;Commit A en main\u0026#34; 2 Crear una rama y hacer cambios divergentes.\ngit checkout -b feature echo \u0026#34;Línea B desde feature\u0026#34; \u0026gt;\u0026gt; archivo.txt git commit -am \u0026#34;Commit B en feature\u0026#34; 3 Volver a main y crear conflicto\ngit checkout main echo \u0026#34;Línea B desde main (conflicto)\u0026#34; \u0026gt;\u0026gt; archivo.txt git commit -am \u0026#34;Commit C en main\u0026#34; 4 Intentar hacer rebase\ngit checkout feature git rebase main 🔴 Git detecta conflicto:\nCONFLICT (content): Merge conflict in archivo.txt 🧭 Resolución del conflicto\n# Ver el contenido del archivo con conflicto cat archivo.txt # Editar y resolver manualmente # Eliminar los marcadores \u0026lt;\u0026lt;\u0026lt; === \u0026gt;\u0026gt;\u0026gt; git add archivo.txt git rebase --continue 📊 Visualización con git log --graph --oneline\n# Antes del rebase (divergente): git log --graph --oneline * bbb111 Commit B en feature | * aaa000 Commit C en main |/ * 123abc Commit A en main # Después del rebase exitoso (conflicto resuelto): * 999xyz Commit B en feature (reaplicado) * aaa000 Commit C en main * 123abc Commit A en main Commit B se ha reaplicado después de C, como parte del nuevo historial lineal.\r1.6 Reaplicar commits: verificar cambios con git diff\r#\rDurante el rebase, puedes usar:\ngit diff HEAD FETCH_HEAD O si estás en medio de un conflicto:\ngit diff Esto te permite:\nVer qué está cambiando respecto al nuevo punto de base Comparar el contenido antes de reaplicar (commit actual) con la rama destino (main, por ejemplo) 1.6 Rebasing vs Merging: Pros y Contras\r#\r| Estrategia | ✅ Pros | ❌ Contras | |-|-| | merge | Historial completo con contexto de integración | Crea commits extra, puede ensuciar el historial | | rebase | Historial lineal y limpio, ideal para revisiones | Reescribe commits, puede confundir si hay colaboradores |\n1.7 ¿Cuándo usar cada uno?\r#\rUsa merge cuando quieres conservar el momento de integración entre ramas (ej. equipos múltiples). Usa rebase cuando quieres una historia limpia antes de compartir o presentar. Flujo de git merge con conflicto\r#\rMERGE: A / \\ B C \\ / D \u0026lt;-- merge con posible conflicto git checkout master git merge featureX # ⛔ Conflicto git status # ✅ Muestra \u0026#34;both modified: fileA.txt\u0026#34; # Editar y resolver manualmente conflicto en fileA.txt git add fileA.txt git commit # ✅ Confirma merge con resolución Flujo de git rebase con conflicto\r#\rREBASE: A -\u0026gt; B -\u0026gt; C\u0026#39; ↑ reaplicación del commit de featureX git checkout featureX git rebase master # ⛔ Conflicto git status # ✅ Muestra \u0026#34;both modified: fileA.txt\u0026#34; # Editar y resolver manualmente conflicto en fileA.txt git add fileA.txt git rebase --continue # ✅ Continúa el rebase "},{"id":16,"href":"/git-course/docs/module3/git-rewriting-history/","title":"Git Rewriting History","section":"Modulo 3","content":"\r**1 Rewriting History en Git\r#\rReescribir la historia en Git permite modificar commits existentes, ya sea para corregir errores, pulir el historial, simplificar la integración, o preparar el proyecto para revisión o publicación. Esta sección cubre:\ngit commit --amend git rebase -i (interactivo) Squash merge (--squash) "},{"id":17,"href":"/git-course/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates\r#\rGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax\r#\rGolang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables\r#\rEach Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions\r#\rGo template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes\r#\rWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic\r#\rGo templates provide the most basic iteration and conditional logic.\nIteration\r#\rJust like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals\r#\rIf, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes\r#\rOne of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot)\r#\rThe most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters\r#\rHugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters\r#\rIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters\r#\rIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":18,"href":"/git-course/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"\rStep 1. Install Hugo\r#\rGo to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs\r#\rHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site\r#\rStop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun\r#\rThe best way to learn something is to play with it.\n"},{"id":19,"href":"/git-course/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"\r4th Level of Menu\r#\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":20,"href":"/git-course/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"\r3rd Level of Menu\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":21,"href":"/git-course/docs/example/hidden/","title":"Hidden","section":"Example Site","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":22,"href":"/git-course/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"\rButtons\r#\rButtons are styled links that can lead to local page or external link.\nExample\r#\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home\rContribute\r"},{"id":23,"href":"/git-course/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"\rColumns\r#\rColumns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example\r#\r## Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes. Miseratus fonte Ditis conubia. ## Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! ## Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes. Miseratus fonte Ditis conubia. "},{"id":24,"href":"/git-course/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"\rDetails\r#\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r{{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title\r## Markdown content Lorem markdownum insigne... "},{"id":25,"href":"/git-course/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":"\rExpand\r#\rExpand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample\r#\rDefault\r#\r{{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand\r↕\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\nWith Custom Label\r#\r{{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label\r...\rMarkdown content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":26,"href":"/git-course/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"\rHints\r#\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example\r#\r**Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":27,"href":"/git-course/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":"\rKaTeX\r#\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r```latex {{\u003c katex [display] [class=\"text-center\"] \u003e}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u003c /katex \u003e}} ``` \\( f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\)\rDisplay Mode Example\r#\rHere is some inline example: \\(\\pi(x)\\)\r, rendered in the same line. And below is display example, having display: block \\( f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\)\rText continues here.\n"},{"id":28,"href":"/git-course/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"\rMermaid Chart\r#\rMermaidJS is library for generating svg charts and diagrams from text.\n**Override Mermaid Initialization Config** To override the [initialization config](https://mermaid-js.github.io/mermaid/#/Setup) for Mermaid, create a `mermaid.json` file in your `assets` folder! Example\r#\r```tpl {{\u003c mermaid [class=\"text-center\"]\u003e}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. {{\u003c /mermaid \u003e}} ``` stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":29,"href":"/git-course/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"\rSection\r#\rSection renders pages in section as definition list, using title and description.\nExample\r#\r{{\u0026lt; section \u0026gt;}} First Page\rSecond Page\r"},{"id":30,"href":"/git-course/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":31,"href":"/git-course/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":32,"href":"/git-course/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"\rTabs\r#\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\rMacOS\r# MacOS This is tab **MacOS** content. Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes. Miseratus fonte Ditis conubia. Linux\r# Linux This is tab **Linux** content. Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes. Miseratus fonte Ditis conubia. Windows\r# Windows This is tab **Windows** content. Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes. Miseratus fonte Ditis conubia. "}]