<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modulo 1 on Aprendiendo GIT</title>
    <link>http://localhost:1313/git-course/docs/module1/</link>
    <description>Recent content in Modulo 1 on Aprendiendo GIT</description>
    <generator>Hugo</generator>
    <language>en-es</language>
    <atom:link href="http://localhost:1313/git-course/docs/module1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Started</title>
      <link>http://localhost:1313/git-course/docs/module1/git-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-started/</guid>
      <description>&lt;h2 id=&#34;1-instalación-y-verificación-de-versión&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. Instalación y Verificación de Versión&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-instalaci%c3%b3n-y-verificaci%c3%b3n-de-versi%c3%b3n&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Git es una herramienta de control de versiones distribuido. Para comenzar, se debe instalar Git en el sistema operativo correspondiente.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# En sistemas Debian/Ubuntu&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# En macOS con Homebrew&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# En Windows&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Usar el instalador desde: https://git-scm.com/download/win&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verificar instalación&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#resultado&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git version 2.38.1.windows.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-sintaxis-general-de-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2. Sintaxis General de Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-sintaxis-general-de-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;La sintaxis de Git sigue esta estructura:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git New Repo</title>
      <link>http://localhost:1313/git-course/docs/module1/git-new-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-new-repo/</guid>
      <description>&lt;h2 id=&#34;1-qué-hace-git-init&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. ¿Qué hace git init?&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-qu%c3%a9-hace-git-init&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;El comando &lt;code&gt;git init&lt;/code&gt; inicializa un nuevo repositorio Git en el directorio actual. Esto crea una subcarpeta oculta llamada &lt;code&gt;.git&lt;/code&gt;, que contiene toda la información necesaria para el control de versiones: historial, configuración, objetos, referencias, etc.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Después de ejecutar &lt;code&gt;git init&lt;/code&gt;, el directorio pasa a ser un repositorio local, y Git comienza a rastrear los archivos que se agreguen&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-relación-con-las-áreas-de-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2. Relación con las Áreas de Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-relaci%c3%b3n-con-las-%c3%a1reas-de-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Git organiza el flujo de trabajo en tres áreas principales:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Locations</title>
      <link>http://localhost:1313/git-course/docs/module1/git-locations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-locations/</guid>
      <description>&lt;h2 id=&#34;1-working-directory-directorio-de-trabajo&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. Working Directory (Directorio de trabajo)&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-working-directory-directorio-de-trabajo&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Es el lugar donde editas tus archivos directamente.&lt;/li&gt;&#xA;&lt;li&gt;Aquí ves los archivos tal como están en tu sistema de archivos.&lt;/li&gt;&#xA;&lt;li&gt;Los cambios que haces aún no están registrados por Git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-staging-area-área-de-preparación-o-índice&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2. Staging Area (Área de preparación o índice)&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-staging-area-%c3%a1rea-de-preparaci%c3%b3n-o-%c3%adndice&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Es una zona intermedia donde seleccionas qué cambios quieres incluir en el próximo commit.&lt;/li&gt;&#xA;&lt;li&gt;Usas &lt;strong&gt;#&lt;code&gt;git add&lt;/code&gt;#&lt;/strong&gt;  para mover archivos desde el Working Directory al &lt;strong&gt;#&lt;code&gt;Staging Area&lt;/code&gt;#&lt;/strong&gt; .&lt;/li&gt;&#xA;&lt;li&gt;Te permite tener control granular sobre qué se guarda en el historial.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-local-repository-repositorio-local&#34;&gt;&#xD;&#xA;  &lt;strong&gt;3. Local Repository (Repositorio local)&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-local-repository-repositorio-local&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Es donde Git guarda los &lt;strong&gt;#&lt;code&gt;commits&lt;/code&gt;#&lt;/strong&gt; que haces.&lt;/li&gt;&#xA;&lt;li&gt;Se encuentra dentro de la carpeta oculta &lt;strong&gt;#&lt;code&gt;.git&lt;/code&gt;#&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Aquí vive el historial completo de tu proyecto.&lt;/li&gt;&#xA;&lt;li&gt;Usas &lt;strong&gt;#&lt;code&gt;git commit&lt;/code&gt;#&lt;/strong&gt;  para mover los cambios del Staging Area al repositorio local.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-remote-repository-repositorio-remoto&#34;&gt;&#xD;&#xA;  &lt;strong&gt;4. Remote Repository (Repositorio remoto)&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-remote-repository-repositorio-remoto&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Es una copia del repositorio alojada en un servidor como GitHub, GitLab o Bitbucket.&lt;/li&gt;&#xA;&lt;li&gt;Permite colaboración entre desarrolladores.&lt;/li&gt;&#xA;&lt;li&gt;Usas &lt;strong&gt;#&lt;code&gt;git push&lt;/code&gt;#&lt;/strong&gt; para enviar tus &lt;strong&gt;#&lt;code&gt;commits&lt;/code&gt;#&lt;/strong&gt; al remoto, y  &lt;strong&gt;#&lt;code&gt;git pull&lt;/code&gt;#&lt;/strong&gt;  para traer cambios.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Flujo típico de trabajo&#xA;Working Directory → git add → Staging Area → git commit → Local Repository → git push → Remote Repository&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Graph Model</title>
      <link>http://localhost:1313/git-course/docs/module1/git-graph-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-graph-model/</guid>
      <description>&lt;h2 id=&#34;1-el-modelo-de-grafo-en-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. El modelo de grafo en Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-el-modelo-de-grafo-en-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Entender cómo Git representa el historial de cambios como un grafo dirigido acíclico (DAG), y cómo cada commit se conecta con sus antecesores.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-dag-visual&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2. DAG visual&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-dag-visual&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xD;&#xA;graph LR&#xD;&#xA;    A[Commit A] --&gt; B[Commit B]&#xD;&#xA;    B --&gt; C[Commit C]&#xD;&#xA;    C --&gt; D[Commit D]&#xD;&#xA;    B --&gt; E[Feature Branch: Commit E]&#xD;&#xA;    E --&gt; F[Commit F]&#xD;&#xA;    F --&gt; G[Merge Commit G]&#xD;&#xA;    D --&gt; G&#xD;&#xA;    classDef commit fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;&#xD;&#xA;    class A,B,C,D,E,F,G commit;&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xA;&lt;h2 id=&#34;3-comandos-esenciales-para-entender-el-dag-en-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;3. Comandos esenciales para entender el DAG en Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-comandos-esenciales-para-entender-el-dag-en-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;🛠 Comando&lt;/th&gt;&#xA;          &lt;th&gt;📘 Propósito&lt;/th&gt;&#xA;          &lt;th&gt;🧾 Explicación&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git log --oneline --graph --decorate --all&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Visualizar el grafo completo de commits&lt;/td&gt;&#xA;          &lt;td&gt;Dibuja el DAG con líneas de conexión, nombres de ramas y commits compactos.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git show &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Inspeccionar un nodo específico&lt;/td&gt;&#xA;          &lt;td&gt;Muestra los detalles, cambios y metadatos de un commit individual.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git diff &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Comparar dos nodos del grafo&lt;/td&gt;&#xA;          &lt;td&gt;Permite ver los cambios entre dos commits, útil para estudiar su evolución.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Consultar el historial interno del HEAD&lt;/td&gt;&#xA;          &lt;td&gt;Muestra los movimientos recientes, ideal para recuperar commits perdidos.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git cat-file -p &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ver el contenido crudo de un commit&lt;/td&gt;&#xA;          &lt;td&gt;Revela cómo Git almacena los objetos internamente en el grafo.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git rev-parse &amp;lt;ref&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Obtener el SHA-1 de una referencia&lt;/td&gt;&#xA;          &lt;td&gt;Identifica un nodo del grafo con su hash único.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git fsck&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verificar la integridad del DAG&lt;/td&gt;&#xA;          &lt;td&gt;Comprueba que no existan objetos corruptos o referencias rotas.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xD;&#xA;graph LR&#xD;&#xA;  A[git log] --&gt; DAG[🔗 DAG]&#xD;&#xA;  B[git show commit] --&gt; DAG&#xD;&#xA;  C[git diff commit1 commit2] --&gt; DAG&#xD;&#xA;  D[git reflog] --&gt; DAG&#xD;&#xA;  E[git cat-file -p commit] --&gt; DAG&#xD;&#xA;  F[git rev-parse ref] --&gt; DAG&#xD;&#xA;  G[git fsck] --&gt; DAG&#xD;&#xA;&#xD;&#xA;  DAG --&gt; H[Historia de commits]&#xD;&#xA;  DAG --&gt; I[Relaciones entre nodos]&#xD;&#xA;  DAG --&gt; J[Estructura interna]&#xD;&#xA;&#xD;&#xA;  classDef cmd fill:#e0f7fa,stroke:#00796b,stroke-width:2px,rx:10;&#xD;&#xA;  class A,B,C,D,E,F,G cmd;&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xD;&#xA;  &#xD;&#xA;Este gráfico representa cómo diversos comandos de Git permiten explorar, inspeccionar y verificar el DAG (grafo dirigido acíclico) que modela la historia del proyecto. Cada nodo representa un commit, y las relaciones muestran cómo fluye el desarrollo del código.&#xD;&#xA;&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xA;&lt;h2 id=&#34;ejercicio-explorando-el-dag-en-git-usando-comandos&#34;&gt;&#xD;&#xA;  &lt;strong&gt;Ejercicio: Explorando el DAG en Git usando comandos&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ejercicio-explorando-el-dag-en-git-usando-comandos&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;A continuación, se presenta una simulación guiada por consola para construir y explorar el DAG (grafo dirigido acíclico) en Git. Cada paso está comentado para entender su propósito dentro del modelo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git ID</title>
      <link>http://localhost:1313/git-course/docs/module1/git-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-id/</guid>
      <description>&lt;h2 id=&#34;1-qué-es-un-git-id&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1 ¿Qué es un Git ID?&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-qu%c3%a9-es-un-git-id&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Un Git ID es el nombre de un objeto git&lt;/li&gt;&#xA;&lt;li&gt;Cada commit en Git tiene un identificador único: un hash SHA-1 de 40 caracteres.&lt;/li&gt;&#xA;&lt;li&gt;Este ID garantiza la integridad, unicidad y trazabilidad de cada cambio.&lt;/li&gt;&#xA;&lt;li&gt;Git usa estos IDs para comparar, referenciar y verificar commits.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-tipos-de-git-objects&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2 Tipos de Git Objects&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-tipos-de-git-objects&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Git almacena todo como objetos en &lt;code&gt;.git/objects&lt;/code&gt;. Hay cuatro tipos principales:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Recovery</title>
      <link>http://localhost:1313/git-course/docs/module1/git-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-recovery/</guid>
      <description>&lt;h2 id=&#34;1-gestión-de-commits-y-recuperación-en-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. Gestión de Commits y Recuperación en Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-gesti%c3%b3n-de-commits-y-recuperaci%c3%b3n-en-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Comprender cómo se crean, modifican y revierten commits en Git, y cómo los comandos &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt; y &lt;code&gt;checkout&lt;/code&gt; interactúan con las tres áreas clave del sistema de control de versiones.&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-git-locations&#34;&gt;&#xD;&#xA;  1.1 Git Locations&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-git-locations&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Área&lt;/th&gt;&#xA;          &lt;th&gt;Alias común&lt;/th&gt;&#xA;          &lt;th&gt;Descripción breve&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Working Directory&lt;/td&gt;&#xA;          &lt;td&gt;WD&lt;/td&gt;&#xA;          &lt;td&gt;Archivos locales editables&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Staging Area&lt;/td&gt;&#xA;          &lt;td&gt;Index&lt;/td&gt;&#xA;          &lt;td&gt;Archivos preparados para el próximo commit&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Local Repository&lt;/td&gt;&#xA;          &lt;td&gt;HEAD&lt;/td&gt;&#xA;          &lt;td&gt;Historial confirmado de commits&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;12-comandos-claves&#34;&gt;&#xD;&#xA;  1.2 Comandos Claves&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-comandos-claves&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;git-commit--m-mensaje&#34;&gt;&#xD;&#xA;  &lt;code&gt;git commit -m &amp;quot;mensaje&amp;quot;&lt;/code&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git-commit--m-mensaje&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;Registra los cambios del Staging Area en el Local Reposito&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Diff</title>
      <link>http://localhost:1313/git-course/docs/module1/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-diff/</guid>
      <description>&lt;h2 id=&#34;1-exploración-y-comparación-de-cambios-en-git&#34;&gt;&#xD;&#xA;  &lt;strong&gt;1. Exploración y Comparación de Cambios en Git&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-exploraci%c3%b3n-y-comparaci%c3%b3n-de-cambios-en-git&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;11-definiciones-generales&#34;&gt;&#xD;&#xA;  1.1. Definiciones generales&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-definiciones-generales&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Comando&lt;/th&gt;&#xA;          &lt;th&gt;Descripción&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Muestra diferencias entre archivos, commits o el staging&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git show&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Muestra detalles de un commit específico&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Muestra el historial de commits&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;2&#34;&gt;&#xD;&#xA;  &lt;strong&gt;2. &lt;code&gt;git diff&lt;/code&gt;&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; compara contenido entre distintas Git locations:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Working Directory vs Staging Area&lt;/li&gt;&#xA;&lt;li&gt;Staging Area vs Local Repository&lt;/li&gt;&#xA;&lt;li&gt;Entre commits específico&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xD;&#xA;flowchart LR&#xD;&#xA;    WD[&#34;📂 Working Directory&#34;]&#xD;&#xA;    SA[&#34;📥 Staging Area (Index)&#34;]&#xD;&#xA;    LR[&#34;📦 Local Repository (HEAD)&#34;]&#xD;&#xA;    WD --&gt;|git diff| SA&#xD;&#xA;    SA --&gt;|git diff --cached| LR&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xA;&lt;h3 id=&#34;21-ejemplos-de-uso&#34;&gt;&#xD;&#xA;  2.1 Ejemplos de uso&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-ejemplos-de-uso&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Cambios no preparados (WD vs Staging)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git diff&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Cambios preparados (Staging vs Repo)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git diff --cached&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Comparar dos commits&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git diff HEAD~1 HEAD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Mostrar solo nombres de archivos modificados&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git diff --name-only&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Mostrar diferencias palabra por palabra&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git diff --word-diff&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-ejercicio&#34;&gt;&#xD;&#xA;  2.2 Ejercicio&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-ejercicio&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Modifique un archivo sin hacer &lt;code&gt;add&lt;/code&gt;, luego ejecuta &lt;code&gt;git diff&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Hacer &lt;code&gt;git add&lt;/code&gt;, luego ejecuta &lt;code&gt;git diff --cached&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Compara dos commits con &lt;code&gt;git diff HEAD~2 HEAD&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3&#34;&gt;&#xD;&#xA;  &lt;strong&gt;3. &lt;code&gt;git show&lt;/code&gt;&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;code&gt;git show&lt;/code&gt; muestra el contenido y metadatos de un commit específico&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Commit</title>
      <link>http://localhost:1313/git-course/docs/module1/git-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/git-course/docs/module1/git-commit/</guid>
      <description></description>
    </item>
  </channel>
</rss>
